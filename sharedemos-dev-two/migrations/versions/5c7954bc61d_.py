from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects import postgresql
from sqlalchemy import or_
import sqlalchemy as sa
from alembic import op
"""empty message

Revision ID: 5c7954bc61d
Revises: 537abbef6c73
Create Date: 2018-06-19 10:01:13.160178

"""

# revision identifiers, used by Alembic.
revision = '5c7954bc61d'
down_revision = '54367257754e'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


Session = sessionmaker()
bind = None
session = None
Base = declarative_base()


class SlideTranslationsMixin(object):

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.Unicode, nullable=False)
    notes = sa.Column(postgresql.JSON(none_as_null=True), nullable=True)
    title = sa.Column(sa.Unicode)
    text = sa.Column(sa.Unicode, nullable=False)


class DraftSlideTranslations(SlideTranslationsMixin, Base):
    __tablename__ = 'draft_slide_translations'


class SlideTranslations(SlideTranslationsMixin, Base):
    __tablename__ = 'slide_translations'


def migrate_existing_slide_content(session, do_upgrade=True):

    if do_upgrade:
        update_func = update_slide_text_to_notes
        draft_slide_trans = session.query(DraftSlideTranslations).\
            filter(or_(DraftSlideTranslations.title.isnot(None),
                       DraftSlideTranslations.text != u'')).all()
        slide_trans = session.query(SlideTranslations).\
            filter(or_(SlideTranslations.title.isnot(None),
                       SlideTranslations.text != u'')).all()
    else:
        update_func = update_slide_notes_to_text
        draft_slide_trans = session.query(DraftSlideTranslations).\
            filter(DraftSlideTranslations.notes.isnot(None)).all()
        slide_trans = session.query(SlideTranslations).\
            filter(SlideTranslations.notes.isnot(None)).all()

    update_func(draft_slide_trans)
    update_func(slide_trans)
    session.commit()


def update_slide_text_to_notes(translations):
    bind = op.get_bind()
    session = Session(bind=bind)
    for trans in translations:
        trans.notes = {u'1': {'title': trans.title,
                              'body': trans.text}}
        session.add(trans)


def update_slide_notes_to_text(translations):
    bind = op.get_bind()
    session = Session(bind=bind)
    for trans in translations:
        notes = trans.notes.get('1')
        if notes:
            trans.title = notes.get('title')
            trans.text = notes.get('body', u"")
            session.add(trans)


def upgrade_():
    bind = op.get_bind()
    session = Session(bind=bind)

    # commands auto generated by Alembic - please adjust! #
    op.add_column(
        'draft_slide_translations',
        sa.Column('notes', postgresql.JSON(), nullable=True)
    )
    op.add_column(
        'slide_translations',
        sa.Column('notes', postgresql.JSON(), nullable=True)
    )

    migrate_existing_slide_content(session=session, do_upgrade=True)
    op.drop_column('draft_slide_translations', 'text')
    op.drop_column('draft_slide_translations', 'title')
    op.drop_column('slide_translations', 'text')
    op.drop_column('slide_translations', 'title')
    # end Alembic commands #


def downgrade_():
    bind = op.get_bind()
    session = Session(bind=bind)
    # commands auto generated by Alembic - please adjust! #
    op.add_column(
        'slide_translations',
        sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        'slide_translations',
        sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        'draft_slide_translations',
        sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        'draft_slide_translations',
        sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True)
    )

    migrate_existing_slide_content(session=session, do_upgrade=False)

    op.execute(
        """UPDATE draft_slide_translations SET text='' WHERE text IS NULL;"""
    )
    op.execute(
        """UPDATE slide_translations SET text='' WHERE text IS NULL;"""
    )

    op.alter_column('draft_slide_translations', 'text',
                    existing_type=sa.VARCHAR(),
                    nullable=False,
                    existing_server_default=sa.text(u''),
                    server_default='')
    op.alter_column('slide_translations', 'text',
                    existing_type=sa.VARCHAR(),
                    nullable=False,
                    existing_server_default=sa.text(u''),
                    server_default='')

    op.drop_column('slide_translations', 'notes')
    op.drop_column('draft_slide_translations', 'notes')
    # end Alembic commands #


def upgrade_reports():
    pass


def downgrade_reports():
    pass
