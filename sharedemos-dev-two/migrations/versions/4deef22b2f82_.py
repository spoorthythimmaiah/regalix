"""empty message

Revision ID: 4deef22b2f82
Revises: 5940fc0a5201
Create Date: 2020-02-10 07:10:01.854016

"""

# revision identifiers, used by Alembic.
revision = '4deef22b2f82'
down_revision = '5940fc0a5201'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sync_log')
    op.drop_table('listener')
    op.drop_table('connector')
    ### end Alembic commands ###


def downgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'connector',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('site_url', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('modified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('tenant_uid', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('client_name', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name=u'connector_pkey')
    )
    op.create_table(
        'listener',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('sync_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('repository_folder', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('client_token', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('connector_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('modified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['connector_id'], [u'connector.id'], name=u'listener_connector_id_fkey'),
        sa.PrimaryKeyConstraint('id', name=u'listener_pkey'),
        sa.UniqueConstraint('uuid', name=u'listener_uuid_key')
    )
    op.create_table(
        'sync_log',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('sync_type', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('status_message', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('modified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('response', postgresql.JSON(), autoincrement=False, nullable=True),
        sa.Column('listener_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['listener_id'], [u'listener.id'], name=u'sync_log_listener_id_fkey'),
        sa.PrimaryKeyConstraint('id', name=u'sync_log_pkey'),
        sa.UniqueConstraint('uuid', name=u'sync_log_uuid_key')
    )
    ### end Alembic commands ###    


def upgrade_reports():
    pass


def downgrade_reports():
    pass
