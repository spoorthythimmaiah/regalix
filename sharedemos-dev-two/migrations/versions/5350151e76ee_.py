"""empty message

Revision ID: 5350151e76ee
Revises: 2d72b8159c5c
Create Date: 2017-05-03 04:50:43.927949

"""

# revision identifiers, used by Alembic.
revision = '5350151e76ee'
down_revision = '2d72b8159c5c'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column('options', sa.Column('suggestion_message', postgresql.JSON(), nullable=True))
    op.drop_column('options_chapters', 'tenant_id')
    # end Alembic commands #


def downgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column('options_chapters', sa.Column('tenant_id', sa.Integer(), nullable=True))
    conn = op.get_bind()
    query = conn.execute("select option_id from options_chapters group by option_id")
    option_list = query.fetchall()
    for option in option_list:
        _opt = conn.execute("select * from options where id=" + str(option.option_id)).fetchone()
        conn.execute("update options_chapters set tenant_id = " + str(_opt.tenant_id) + " where option_id=" + str(option.option_id))
    op.alter_column('options_chapters', 'tenant_id',
                    existing_type=sa.INTEGER(),
                    nullable=False)
    op.create_foreign_key('options_chapters_tenant_id_fkey', 'options_chapters', 'tenant', ['tenant_id'], ['id'])
    op.drop_column('options', 'suggestion_message')
    # end Alembic commands #


def upgrade_reports():
    pass


def downgrade_reports():
    pass
