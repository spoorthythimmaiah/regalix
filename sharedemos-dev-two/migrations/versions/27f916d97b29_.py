from sqlalchemy.dialects import postgresql
import sqlalchemy as sa
from alembic import op
"""empty message

Revision ID: 27f916d97b29
Revises: 3b73676abbd1
Create Date: 2018-05-29 10:42:18.941329

"""

# revision identifiers, used by Alembic.
revision = '27f916d97b29'
down_revision = '3b73676abbd1'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column('draft_walkthrough_translations',
                  sa.Column('tag_ids',
                            postgresql.ARRAY(sa.INTEGER(), dimensions=1),
                            nullable=True))
    op.add_column('walkthrough_translations',
                  sa.Column('tag_ids',
                            postgresql.ARRAY(sa.INTEGER(), dimensions=1),
                            nullable=True))
    query = op.execute("select * from walkthroughs_tags")
    if query:
        wt_tags = query.fetchall()
        chapter_tags = dict()
        for wt_t in wt_tags:
            if wt_t.walkthrough_id not in chapter_tags:
                chapter_tags[wt_t.walkthrough_id] = list()

            if wt_t.tag_id not in chapter_tags[wt_t.walkthrough_id]:
                chapter_tags[wt_t.walkthrough_id].append(wt_t.tag_id)
        for wt_id, tag_id_list in chapter_tags.items():
            query = op.execute("select * from walkthrough where id=%s" % wt_id)
            wt = query.fetchone()
            op.execute(sa.text("""
                update walkthrough_translations
                set tag_ids=:t_ids
                where walkthrough_id=:id"""), t_ids=tag_id_list, id=wt_id)
            op.execute(sa.text("""
                update draft_walkthrough_translations
                set tag_ids=:t_ids
                where walkthrough_id=:id"""), t_ids=tag_id_list, id=wt.draft_id)
    op.drop_table('walkthroughs_tags')
    # end Alembic commands #


def downgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.create_table(
        'walkthroughs_tags',
        sa.Column('walkthrough_id', sa.INTEGER(), autoincrement=False,
                  nullable=True),
        sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['tag_id'], [u'tag.id'],
                                name=u'walkthroughs_tags_tag_id_fkey'),
        sa.ForeignKeyConstraint(['walkthrough_id'], [u'walkthrough.id'],
                                name=u'walkthroughs_tags_walkthrough_id_fkey')
    )

    query = op.execute(
        "select * from walkthrough_translations where tag_ids is not NULL"
    )
    if query:
        wt_trans = query.fetchall()

        wt_tag_map = dict()
        for wt in wt_trans:
            if wt.walkthrough_id not in wt_tag_map:
                wt_tag_map[wt.walkthrough_id] = []

            tag_ids = list(
                set(wt_tag_map[wt.walkthrough_id]).union(set(wt.tag_ids))
            )
            wt_tag_map[wt.walkthrough_id] = tag_ids

        for wt_id, tag_list in wt_tag_map.items():
            for t_id in tag_list:
                op.execute(
                    sa.text("""
                        insert into walkthroughs_tags (walkthrough_id, tag_id)
                        values (:wt_id, :t_id)
                    """),
                    wt_id=wt_id, t_id=t_id
                )
    op.drop_column('walkthrough_translations', 'tag_ids')
    op.drop_column('draft_walkthrough_translations', 'tag_ids')
    # end Alembic commands #


def upgrade_reports():
    pass


def downgrade_reports():
    pass
