"""empty message

Revision ID: 350d170aa612
Revises: 39ea68daa8e1
Create Date: 2017-05-23 05:24:23.529839

"""

# revision identifiers, used by Alembic.
revision = '350d170aa612'
down_revision = '39ea68daa8e1'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql.functions import current_timestamp

def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('suggestions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, server_default='false'),
    sa.Column('order', sa.Integer(), nullable=False, server_default=u'1'),
    sa.Column('option_id', sa.Integer(), nullable=True),
    sa.Column('walkthrough_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('external_link', postgresql.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False, server_default=current_timestamp()),
    sa.Column('modified_at', sa.DateTime(), nullable=False, server_default=current_timestamp()),
    sa.ForeignKeyConstraint(['option_id'], ['options.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], ),
    sa.ForeignKeyConstraint(['walkthrough_id'], ['walkthrough.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    conn = op.get_bind()
    query = conn.execute("select options_chapters.option_id, options_chapters.walkthrough_id, options.tenant_id from options_chapters \
        INNER JOIN options ON options_chapters.option_id=options.id")
    options_chapters = query.fetchall()
    option_dict = dict()

    for chapter in options_chapters:
        if chapter.option_id not in option_dict:
            option_dict[chapter.option_id] = {'demos': list(), 'tenant_id': chapter.tenant_id}  #[chapter.walkthrough_id]

        option_dict[chapter.option_id]['demos'].append(chapter.walkthrough_id)

    for option_id, walkthrough_details in option_dict.items():
        for idx, chap_id in enumerate(walkthrough_details.get('demos', [])):
            query = """insert into suggestions(option_id, walkthrough_id, tenant_id,  "order") values ({0}, {1}, {2}, {3})""".format(option_id, chap_id, walkthrough_details.get('tenant_id'), idx+1)
            op.execute(query)


    op.drop_table('options_chapters')
    ### end Alembic commands ###


def downgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('options_chapters',
    sa.Column('option_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('walkthrough_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['option_id'], [u'options.id'], name=u'options_chapters_option_id_fkey'),
    sa.ForeignKeyConstraint(['walkthrough_id'], [u'walkthrough.id'], name=u'options_chapters_walkthrough_id_fkey')
    )
    op.drop_table('suggestions')
    ### end Alembic commands ###


def upgrade_reports():
    pass


def downgrade_reports():
    pass

