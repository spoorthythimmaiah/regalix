"""empty message

Revision ID: 2295686e9b0
Revises: 430947222727
Create Date: 2019-03-11 06:19:40.478708

"""

# revision identifiers, used by Alembic.
revision = '2295686e9b0'
down_revision = '430947222727'
branch_labels = None
depends_on = None

from datetime import datetime

from flask import current_app

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref

Session = sessionmaker()
Base = declarative_base()

class Section(Base):

    __tablename__ = 'section'

    id = sa.Column(sa.Integer, primary_key=True)
    parent_id = sa.Column(sa.Integer, sa.ForeignKey('section.id'),
                          default=None)
    tenant_id = sa.Column(sa.Integer, sa.ForeignKey('tenant.id'))
    order = sa.Column(sa.Integer, nullable=False)
    created_at = sa.Column(sa.DateTime, default=datetime.utcnow,
                           nullable=False)
    parent = relationship("Section",
                             backref=backref(
                                 'children',
                                 cascade_backrefs=False,
                                 order_by='Section.order, Section.created_at'
                             ),
                             remote_side=[id],
                             foreign_keys=parent_id)


def get_category(section):
    if section.parent_id:
        return get_category(section.parent)
    return section

def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('rating', sa.Column('language_id', sa.Unicode(), nullable=True))
    op.add_column('rating', sa.Column('product_id', sa.Integer(), nullable=True))
    op.add_column('rating', sa.Column('section_id', sa.Integer(), nullable=True))
    op.add_column('rating', sa.Column('user_activity_id', sa.Integer(), nullable=True))
    op.alter_column('rating', 'chapter_id',
                    existing_type=sa.INTEGER(),
                    nullable=True)
    op.drop_constraint(u'rating_user_id_fkey', 'rating', type_='foreignkey')
    op.create_foreign_key('rating_section_id_fkey', 'rating', 'section', ['section_id'], ['id'])
    op.create_foreign_key('rating_product_id_fkey', 'rating', 'section', ['product_id'], ['id'])
    op.create_foreign_key('rating_language_id_fkey', 'rating', 'languages', ['language_id'], ['id'])
    op.create_foreign_key('rating_user_activity_id_fkey', 'rating', 'user_activity', ['user_activity_id'], ['id'])

    conn = op.get_bind()
    session = Session(bind=conn)

    """creates dictionary in which, section_id is key and it's product_id is value."""
    sections = session.query(Section).all()
    product_ids = {}
    for section in sections:
        product_ids[section.id] = get_category(section).id

    ratings = conn.execute("""
        SELECT user_id, tenant_id
        FROM rating
    """).fetchall()

    """ updating user_activity_id in rating with user_id in user_activity model."""
    user_ids = {rating.user_id for rating in ratings}
    if user_ids:
        base_query = sa.text("""
            SELECT DISTINCT ON (user_id) user_id, id
            FROM user_activity
            WHERE user_id in :user_ids
            ORDER BY user_id, created_at DESC
        """)
        user_activities = conn.execute(
            base_query,
            user_ids=tuple(user_ids)
        ).fetchall()
        user_ids_dict = {user_activity.user_id: user_activity.id for user_activity in user_activities}
        for user_id in user_ids:
            conn.execute(
                sa.text("""
                    UPDATE rating
                    SET user_activity_id=:user_activity_id
                    WHERE user_id=:user_id
                """),
                user_activity_id=user_ids_dict.get(user_id),
                user_id=user_id
            )

        """creates dictionary in which, tenant_id is key and it's default_locale_id is value"""
        tenant_ids = {rating.tenant_id for rating in ratings}
        tenant_base_query = sa.text("""
            SELECT id, default_locale_id
            FROM tenant
            WHERE id in :tenant_ids
        """)
        tenants = conn.execute(
            tenant_base_query,
            tenant_ids=tuple(tenant_ids)
        ).fetchall()
        language_ids_dict = {tenant.id: tenant.default_locale_id for tenant in tenants}
        if language_ids_dict:
            """updates section_id, product_id, language_id for existing ratings"""
            chapters = conn.execute("""
                SELECT w.id AS walkthrough_id,
                       w.tenant_id AS tenant_id,
                       s.id AS section_id
                FROM walkthrough w
                JOIN playlist p ON w.playlist_id = p.id
                JOIN section S ON p.section_id = s.id
                where w.id IN(SELECT DISTINCT chapter_id FROM rating)
            """)
            chapters = chapters.fetchall()

            for chapter in chapters:
                conn.execute(
                    sa.text("""
                        UPDATE rating
                        SET section_id=:section_id,
                            product_id=:product_id,
                            language_id=:language_id
                        WHERE chapter_id=:chapter_id
                    """),
                    chapter_id=chapter.walkthrough_id,
                    section_id=chapter.section_id,
                    product_id=product_ids[chapter.section_id],
                    language_id=language_ids_dict[chapter.tenant_id]
                )

    op.alter_column('rating', 'language_id',
                    existing_type=sa.Unicode(),
                    nullable=False)
    op.alter_column('rating', 'product_id',
                    existing_type=sa.Integer(),
                    nullable=False)
    op.alter_column('rating', 'section_id',
                    existing_type=sa.Integer(),
                    nullable=False)
    op.alter_column('rating', 'user_activity_id',
                    existing_type=sa.Integer(),
                    nullable=False)

    op.drop_column('rating', 'modified_at')
    op.drop_column('rating', 'user_id')
    ### end Alembic commands ###


def downgrade_():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('rating', sa.Column('user_id', sa.INTEGER(),
                                      autoincrement=False, nullable=True))
    op.add_column('rating', sa.Column('modified_at', postgresql.TIMESTAMP(),
                                      autoincrement=False, nullable=True))

    conn = op.get_bind()

    ratings = conn.execute("""
        SELECT DISTINCT user_activity_id
        FROM rating
    """).fetchall()

    user_activity_ids = [rating.user_activity_id for rating in ratings]
    if user_activity_ids:
        base_query = sa.text("""
            SELECT user_id, id
            FROM user_activity
            WHERE id in :user_activity_ids and user_id is not null
        """)
        user_activities = conn.execute(
            base_query,
            user_activity_ids=tuple(user_activity_ids)
        ).fetchall()
        user_ids_dict = {user_activity.id: user_activity.user_id for user_activity in user_activities}

        for user_activity_id in user_activity_ids:
            conn.execute(
                sa.text("""
                    UPDATE rating
                    SET user_id=:user_id,
                        modified_at=created_at
                    WHERE user_activity_id=:user_activity_id
                """),
                user_id=user_ids_dict.get(user_activity_id),
                user_activity_id=user_activity_id
            )

    op.drop_constraint('rating_language_id_fkey', 'rating', type_='foreignkey')
    op.drop_constraint('rating_product_id_fkey', 'rating', type_='foreignkey')
    op.drop_constraint('rating_section_id_fkey', 'rating', type_='foreignkey')
    op.drop_constraint('rating_user_activity_id_fkey', 'rating', type_='foreignkey')
    op.create_foreign_key(u'rating_user_id_fkey', 'rating', 'users', ['user_id'], ['id'])
    op.drop_column('rating', 'language_id')
    op.drop_column('rating', 'product_id')
    op.drop_column('rating', 'section_id')
    op.drop_column('rating', 'user_activity_id')

    op.alter_column('rating', 'chapter_id',
                    existing_type=sa.INTEGER(),
                    nullable=False)
    op.alter_column('rating', 'user_id',
                    existing_type=sa.INTEGER(),
                    nullable=False)
    ### end Alembic commands ###


def upgrade_reports():
    pass


def downgrade_reports():
    pass
