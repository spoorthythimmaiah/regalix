"""empty message

Revision ID: 1fefde9e8205
Revises: 4bcbc47368cc
Create Date: 2015-11-17 02:04:16.247145

"""

# revision identifiers, used by Alembic.
revision = '1fefde9e8205'
down_revision = '4bcbc47368cc'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.create_table(
        'lead_cta_form',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.Unicode(), nullable=False),
        sa.Column('cta_button', postgresql.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('tenant_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.add_column(u'section', sa.Column('cta_id', sa.Integer(), nullable=True))

    conn = op.get_bind()
    query = conn.execute("select * from section where cta_button::text <> '{}'::text\
     and cta_button::text <> 'null' or campaign_message is not NULL")
    section_list = query.fetchall()
    for sec in section_list:
        if sec.cta_button:
            if sec.cta_button['type'] == 'form':
                cta = conn.execute("select * from lead_cta_form where \
                tenant_id=" + str(sec.tenant_id) + " and cta_button::json#>>'{type}'='form' and\
                cta_button->>'text'='" + sec.cta_button['text'] + "' and \
                cta_button::json#>>'{fields}'='" + str(sec.cta_button['fields']).replace("u\'", "\'").replace("\'", "\"") + "'")

                cta = cta.fetchone()
                cta_id = None
                if not cta:
                    name = None
                    if sec.campaign_message:
                        sec.cta_button['campaign_message'] = name = sec.campaign_message

                    if not name:
                        trans_query = conn.execute("select * from section_translations where \
                                                   language_id = 'en_US' and section_id = " + str(sec.id))
                        sec_name = trans_query.fetchone()
                        name = sec_name.name
                    result = conn.execute("insert into lead_cta_form(name, cta_button, created_at, tenant_id) values\
                    ('" + name + "', '" + str(sec.cta_button).replace("u\'", "\'").replace("\'", "\"") + "\
                     ', '2015-11-16 22:10:24.062444', " + str(sec.tenant_id) + ") returning lead_cta_form.id")
                    cta_id = result.first()[0]
                else:
                    cta_id = cta.id

                conn.execute("update section set cta_id=" + str(cta_id) + " where id=" + str(sec.id))

            elif sec.cta_button['type'] == 'link':
                cta = conn.execute("select * from lead_cta_form where tenant_id=" + str(sec.tenant_id) + " and\
                cta_button::json#>>'{type}'='link' and cta_button->>'text'='" + sec.cta_button['text'] + "' and\
                cta_button::json#>>'{href}'='" + sec.cta_button['href'] + "'")
                cta = cta.fetchone()
                if not cta:
                    name = None
                    if sec.cta_button.get('text'):
                        name = sec.cta_button['text']
                    if sec.campaign_message:
                        sec.cta_button['campaign_message'] = sec.campaign_message
                        if not name:
                            name = sec.campaign_message

                    if not name:
                        trans_query = conn.execute("select * from section_translations where\
                                                   language_id = 'en_US' and section_id = " + str(sec.id))
                        sec_name = trans_query.fetchone()
                        name = sec_name.name
                    result = conn.execute("insert into lead_cta_form(name, cta_button, created_at, tenant_id) values\
                                 ('" + name + "\
                                  ', '" + str(sec.cta_button).replace("u\'", "\'").replace("\'", "\"") + "\
                                  ', '2015-11-16 22:10:24.062444', " + str(sec.tenant_id) + ") returning lead_cta_form.id")
                    cta_id = result.first()[0]
                else:
                    cta_id = cta.id

                conn.execute("update section set cta_id=" + str(cta_id) + " where id=" + str(sec.id))

    op.create_foreign_key('section_cta_foreign_key', 'section', 'lead_cta_form', ['cta_id'], ['id'])
    op.drop_column(u'section', 'campaign_message')
    op.drop_column(u'section', 'cta_button')
    # end Alembic commands #


def downgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column(u'section', sa.Column('cta_button', postgresql.JSON(), autoincrement=False, nullable=True))
    op.add_column(u'section', sa.Column('campaign_message', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint('section_cta_foreign_key', 'section', type_='foreignkey')
    op.drop_column(u'section', 'cta_id')
    op.drop_table('lead_cta_form')
    # end Alembic commands #


def upgrade_reports():
    pass


def downgrade_reports():
    pass
