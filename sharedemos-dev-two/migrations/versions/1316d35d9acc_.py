"""empty message

Revision ID: 1316d35d9acc
Revises: 25312a814723
Create Date: 2017-10-11 07:06:37.105584

"""

# revision identifiers, used by Alembic.
revision = '1316d35d9acc'
down_revision = '25312a814723'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql.functions import current_timestamp
from sqlalchemy.ext.declarative import declarative_base

Session = sessionmaker()
Base = declarative_base()


class Section(Base):

    __tablename__ = 'section'

    id = sa.Column(sa.Integer, primary_key=True)


class SectionTranslations(Base):

    __tablename__ = 'section_translations'

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.Unicode, nullable=False)
    title = sa.Column(sa.Unicode, nullable=False)
    description = sa.Column(sa.Unicode)

    section_id = sa.Column(sa.Integer, sa.ForeignKey('section.id'), nullable=False)

    tag_ids = sa.Column(postgresql.JSON())

    created_at = sa.Column(sa.DateTime, default=current_timestamp(), nullable=False)
    modified_at = sa.Column(sa.DateTime,
                            default=current_timestamp(),
                            onupdate=current_timestamp(),
                            nullable=False)


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_reports():
    pass


def downgrade_reports():
    pass


def upgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column('section_translations', sa.Column('tag_ids', postgresql.JSON(none_as_null=True), nullable=True))

    conn = op.get_bind()
    query = conn.execute('select * from sections_tags')
    sections_tags = query.fetchall()
    result = dict()
    for section_tag in sections_tags:
        if section_tag.section_id not in result:
            result[section_tag.section_id] = list()
        result[section_tag.section_id].append(section_tag.tag_id)

    session = Session(bind=conn)

    section_translations = session.query(SectionTranslations).all()
    for section_translation in section_translations:
        if section_translation.section_id in result:
            section_translation.tag_ids = result[section_translation.section_id]

            session.add(section_translation)

    session.commit()

    op.drop_table('sections_tags')
    # end Alembic commands #


def downgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.drop_column('section_translations', 'tag_ids')
    op.create_table(
        'sections_tags',
        sa.Column('section_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(['section_id'], [u'section.id'], name=u'sections_tags_section_id_fkey'),
        sa.ForeignKeyConstraint(['tag_id'], [u'tag.id'], name=u'sections_tags_tag_id_fkey')
    )
    # end Alembic commands #
