from alembic import op
import sqlalchemy as sa

"""
Revision ID: 111166c924ed
Revises: 30ae701c85ae
Create Date: 2018-10-15 07:01:14.797083
"""

# revision identifiers, used by Alembic.
revision = '111166c924ed'
down_revision = '30ae701c85ae'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.create_table(
        'sections_cta',
        sa.Column('cta_id', sa.Integer(), nullable=False),
        sa.Column('section_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['cta_id'], ['lead_cta_form.id'], ),
        sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
        sa.PrimaryKeyConstraint('cta_id', 'section_id')
    )

    cta_list = op.get_bind().execute(
        "select * from lead_cta_form"
    )

    cta_list = cta_list.fetchall()

    cta_dict = {_c.id: _c.created_at for _c in cta_list}

    section_list = op.get_bind().execute(
        "select * from section where cta_id is not NULL"
    )
    section_list = section_list.fetchall()
    for _sec in section_list:
        op.execute(
            sa.text("""
                insert into sections_cta (cta_id, section_id, created_at)
                values (:cta_id, :sec_id, :c_at)
            """),
            cta_id=_sec.cta_id, sec_id=_sec.id, c_at=cta_dict[_sec.cta_id]
        )

    op.drop_constraint(
        u'section_cta_foreign_key',
        'section',
        type_='foreignkey'
    )
    op.drop_column(u'section', 'cta_id')
    # end Alembic commands #


def downgrade_():
    # commands auto generated by Alembic - please adjust! #
    op.add_column(
        u'section',
        sa.Column(
            'cta_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=True
        )
    )
    op.create_foreign_key(
        u'section_cta_foreign_key',
        'section',
        'lead_cta_form',
        ['cta_id'],
        ['id']
    )

    cta_list = op.get_bind().execute(
        "select * from sections_cta order by created_at"
    )

    cta_list = cta_list.fetchall()

    section_ids_list = []

    for _cta in cta_list:
        if _cta.section_id in section_ids_list:
            continue
        op.execute(
            sa.text(
                """
                update section
                set cta_id=:cta_id
                where id=:id
                """
            ).bindparams(
                cta_id=_cta.cta_id,
                id=_cta.section_id
            )
        )
        section_ids_list.append(_cta.section_id)

    op.drop_table('sections_cta')
    # end Alembic commands #


def upgrade_reports():
    pass


def downgrade_reports():
    pass
