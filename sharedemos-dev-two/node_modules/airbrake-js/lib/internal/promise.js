(function() {
  var Promise;

  Promise = (function() {
    function Promise(executor) {
      var reject, resolve;
      this._onResolved = [];
      this._onRejected = [];
      resolve = (function(_this) {
        return function() {
          return _this.resolve.apply(_this, arguments);
        };
      })(this);
      reject = (function(_this) {
        return function() {
          return _this.reject.apply(_this, arguments);
        };
      })(this);
      if (executor != null) {
        executor(resolve, reject);
      }
    }

    Promise.prototype.then = function(onResolved, onRejected) {
      if (onResolved) {
        if (this._resolvedWith != null) {
          onResolved(this._resolvedWith);
        }
        this._onResolved.push(onResolved);
      }
      if (onRejected) {
        if (this._rejectedWith != null) {
          onRejected(this._resolvedWith);
        }
        this._onRejected.push(onRejected);
      }
      return this;
    };

    Promise.prototype["catch"] = function(onRejected) {
      if (this._rejectedWith != null) {
        onRejected(this._rejectedWith);
      }
      this._onRejected.push(onRejected);
      return this;
    };

    Promise.prototype.resolve = function() {
      var fn, i, len, ref;
      this._resolvedWith = arguments;
      ref = this._onResolved;
      for (i = 0, len = ref.length; i < len; i++) {
        fn = ref[i];
        fn.apply(this, this._resolvedWith);
      }
      return this;
    };

    Promise.prototype.reject = function() {
      var fn, i, len, ref;
      this._rejectedWith = arguments;
      ref = this._onRejected;
      for (i = 0, len = ref.length; i < len; i++) {
        fn = ref[i];
        fn.apply(this, this._rejectedWith);
      }
      return this;
    };

    return Promise;

  })();

  module.exports = Promise;

}).call(this);
