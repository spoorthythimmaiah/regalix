'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _server = require('react-dom/server');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var colors = ['#1abc9c', '#16a085', '#f1c40f', '#f39c12', '#2ecc71', '#27ae60', '#e67e22', '#d35400', '#3498db', '#2980b9', '#e74c3c', '#c0392b', '#9b59b6', '#8e44ad', '#bdc3c7', '#34495e', '#2c3e50', '#95a5a6', '#7f8c8d', '#ec87bf', '#d870ad', '#f69785', '#9ba37e', '#b49255', '#b49255', '#a94136'];

var Initial = function (_Component) {
  _inherits(Initial, _Component);

  function Initial() {
    _classCallCheck(this, Initial);

    return _possibleConstructorReturn(this, (Initial.__proto__ || Object.getPrototypeOf(Initial)).apply(this, arguments));
  }

  _createClass(Initial, [{
    key: 'unicodeCharAt',
    value: function unicodeCharAt(string, index) {
      var first = string.charCodeAt(index);
      var second = void 0;

      if (first >= 0xD800 && first <= 0xDBFF && string.length > index + 1) {
        second = string.charCodeAt(index + 1);

        if (second >= 0xDC00 && second <= 0xDFFF) {
          return string.substring(index, index + 2);
        }
      }

      return string[index];
    }
  }, {
    key: 'unicodeSlice',
    value: function unicodeSlice(string, start, end) {
      var accumulator = '';
      var character = void 0;
      var stringIndex = 0;
      var unicodeIndex = 0;
      var length = string.length;

      while (stringIndex < length) {
        character = this.unicodeCharAt(string, stringIndex);

        if (unicodeIndex >= start && unicodeIndex < end) {
          accumulator += character;
        }

        stringIndex += character.length;
        unicodeIndex += 1;
      }

      return accumulator;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          className = _props.className,
          charCount = _props.charCount,
          name = _props.name,
          color = _props.color,
          seed = _props.seed,
          width = _props.width,
          height = _props.height,
          textColor = _props.textColor,
          fontFamily = _props.fontFamily,
          fontSize = _props.fontSize,
          fontWeight = _props.fontWeight,
          borderRadius = _props.radius;

      var initial = this.unicodeSlice(name || 'Name', 0, charCount || 1).toUpperCase();
      var backgroundColor = color !== null ? color : colors[Math.floor((initial.charCodeAt(0) + seed) % colors.length)];

      var InitialSvg = function InitialSvg() {
        return _react2.default.createElement(
          'svg',
          _extends({
            xmlns: 'http://www.w3.org/2000/svg',
            pointerEvents: 'none'
          }, {
            width: width,
            height: height,
            style: {
              width: width,
              height: height,
              backgroundColor: backgroundColor,
              borderRadius: borderRadius
            }
          }),
          _react2.default.createElement('text', {
            y: '50%',
            x: '50%',
            dy: '0.35em',
            pointerEvents: 'auto',
            fill: textColor,
            fontFamily: fontFamily,
            textAnchor: 'middle',
            style: { fontSize: fontSize, fontWeight: fontWeight },
            children: initial })
        );
      };

      var svgHtml = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent((0, _server.renderToStaticMarkup)(_react2.default.createElement(InitialSvg, null)))));

      return _react2.default.createElement('img', {
        style: style,
        className: className,
        src: svgHtml,
        alt: ''
      });
    }
  }]);

  return Initial;
}(_react.Component);

Initial.propTypes = {
  className: _propTypes2.default.string,
  style: _propTypes2.default.object,
  name: _propTypes2.default.string,
  color: _propTypes2.default.string,
  seed: _propTypes2.default.number,
  charCount: _propTypes2.default.number,
  textColor: _propTypes2.default.string,
  height: _propTypes2.default.number,
  width: _propTypes2.default.number,
  fontSize: _propTypes2.default.number,
  fontWeight: _propTypes2.default.number,
  fontFamily: _propTypes2.default.string,
  radius: _propTypes2.default.number
};
Initial.defaultProps = {
  name: 'Name',
  color: null,
  seed: 0,
  charCount: 1,
  textColor: '#ffffff',
  height: 100,
  width: 100,
  fontSize: 60,
  fontWeight: 400,
  fontFamily: 'HelveticaNeue-Light, Helvetica Neue Light, Helvetica Neue, Helvetica, Arial, Lucida Grande, sans-serif',
  radius: 0
};
exports.default = Initial;